// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#ifdef MULTIUSERTOOL_XPlayerController_generated_h
#error "XPlayerController.generated.h already included, missing '#pragma once' in XPlayerController.h"
#endif
#define MULTIUSERTOOL_XPlayerController_generated_h

#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_RPC_WRAPPERS \
	virtual bool PlayReplay_Validate(); \
	virtual void PlayReplay_Implementation(); \
	virtual bool SetInfoNeuron_Validate(int32 , int32 , const FString& ); \
	virtual void SetInfoNeuron_Implementation(int32 idneuron, int32 idInfo, const FString& NeuronInfo); \
	virtual bool UnHideNotEnhacedNeurons_Validate(); \
	virtual void UnHideNotEnhacedNeurons_Implementation(); \
	virtual bool UnHideEnhacedNeurons_Validate(); \
	virtual void UnHideEnhacedNeurons_Implementation(); \
	virtual bool HideNotEnhacedNeurons_Validate(); \
	virtual void HideNotEnhacedNeurons_Implementation(); \
	virtual bool HideEnhacedNeurons_Validate(); \
	virtual void HideEnhacedNeurons_Implementation(); \
	virtual bool EnhanceNeuron_Validate(int32 ); \
	virtual void EnhanceNeuron_Implementation(int32 idneuron); \
 \
	DECLARE_FUNCTION(execToggleNeuronInfoWidget) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_GET_PROPERTY(UIntProperty,Z_Param_idInfo); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NeuronInfo); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->ToggleNeuronInfoWidget(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execToggleNeuronWidget) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->ToggleNeuronWidget(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPlayReplay) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->PlayReplay_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("PlayReplay_Validate")); \
			return; \
		} \
		this->PlayReplay_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetInfoNeuron) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_GET_PROPERTY(UIntProperty,Z_Param_idInfo); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NeuronInfo); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->SetInfoNeuron_Validate(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo)) \
		{ \
			RPC_ValidateFailed(TEXT("SetInfoNeuron_Validate")); \
			return; \
		} \
		this->SetInfoNeuron_Implementation(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execUnHideNotEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->UnHideNotEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("UnHideNotEnhacedNeurons_Validate")); \
			return; \
		} \
		this->UnHideNotEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execUnHideEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->UnHideEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("UnHideEnhacedNeurons_Validate")); \
			return; \
		} \
		this->UnHideEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHideNotEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->HideNotEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("HideNotEnhacedNeurons_Validate")); \
			return; \
		} \
		this->HideNotEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHideEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->HideEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("HideEnhacedNeurons_Validate")); \
			return; \
		} \
		this->HideEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execEnhanceNeuron) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->EnhanceNeuron_Validate(Z_Param_idneuron)) \
		{ \
			RPC_ValidateFailed(TEXT("EnhanceNeuron_Validate")); \
			return; \
		} \
		this->EnhanceNeuron_Implementation(Z_Param_idneuron); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetAllMessages) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->GetAllMessages(); \
		P_NATIVE_END; \
	}


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_RPC_WRAPPERS_NO_PURE_DECLS \
	virtual bool PlayReplay_Validate(); \
	virtual void PlayReplay_Implementation(); \
	virtual bool SetInfoNeuron_Validate(int32 , int32 , const FString& ); \
	virtual void SetInfoNeuron_Implementation(int32 idneuron, int32 idInfo, const FString& NeuronInfo); \
	virtual bool UnHideNotEnhacedNeurons_Validate(); \
	virtual void UnHideNotEnhacedNeurons_Implementation(); \
	virtual bool UnHideEnhacedNeurons_Validate(); \
	virtual void UnHideEnhacedNeurons_Implementation(); \
	virtual bool HideNotEnhacedNeurons_Validate(); \
	virtual void HideNotEnhacedNeurons_Implementation(); \
	virtual bool HideEnhacedNeurons_Validate(); \
	virtual void HideEnhacedNeurons_Implementation(); \
	virtual bool EnhanceNeuron_Validate(int32 ); \
	virtual void EnhanceNeuron_Implementation(int32 idneuron); \
 \
	DECLARE_FUNCTION(execToggleNeuronInfoWidget) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_GET_PROPERTY(UIntProperty,Z_Param_idInfo); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NeuronInfo); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->ToggleNeuronInfoWidget(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execToggleNeuronWidget) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->ToggleNeuronWidget(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPlayReplay) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->PlayReplay_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("PlayReplay_Validate")); \
			return; \
		} \
		this->PlayReplay_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetInfoNeuron) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_GET_PROPERTY(UIntProperty,Z_Param_idInfo); \
		P_GET_PROPERTY(UStrProperty,Z_Param_NeuronInfo); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->SetInfoNeuron_Validate(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo)) \
		{ \
			RPC_ValidateFailed(TEXT("SetInfoNeuron_Validate")); \
			return; \
		} \
		this->SetInfoNeuron_Implementation(Z_Param_idneuron,Z_Param_idInfo,Z_Param_NeuronInfo); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execUnHideNotEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->UnHideNotEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("UnHideNotEnhacedNeurons_Validate")); \
			return; \
		} \
		this->UnHideNotEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execUnHideEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->UnHideEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("UnHideEnhacedNeurons_Validate")); \
			return; \
		} \
		this->UnHideEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHideNotEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->HideNotEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("HideNotEnhacedNeurons_Validate")); \
			return; \
		} \
		this->HideNotEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHideEnhacedNeurons) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->HideEnhacedNeurons_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("HideEnhacedNeurons_Validate")); \
			return; \
		} \
		this->HideEnhacedNeurons_Implementation(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execEnhanceNeuron) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_idneuron); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		if (!this->EnhanceNeuron_Validate(Z_Param_idneuron)) \
		{ \
			RPC_ValidateFailed(TEXT("EnhanceNeuron_Validate")); \
			return; \
		} \
		this->EnhanceNeuron_Implementation(Z_Param_idneuron); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetAllMessages) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->GetAllMessages(); \
		P_NATIVE_END; \
	}


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_EVENT_PARMS \
	struct XPlayerController_eventEnhanceNeuron_Parms \
	{ \
		int32 idneuron; \
	}; \
	struct XPlayerController_eventSetInfoNeuron_Parms \
	{ \
		int32 idneuron; \
		int32 idInfo; \
		FString NeuronInfo; \
	};


extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_EnhanceNeuron;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_HideEnhacedNeurons;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_HideNotEnhacedNeurons;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_PlayReplay;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_SetInfoNeuron;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_UnHideEnhacedNeurons;
extern MULTIUSERTOOL_API  FName MULTIUSERTOOL_UnHideNotEnhacedNeurons;
#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_CALLBACK_WRAPPERS
#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesAXPlayerController(); \
	friend MULTIUSERTOOL_API class UClass* Z_Construct_UClass_AXPlayerController(); \
	public: \
	DECLARE_CLASS(AXPlayerController, APlayerController, COMPILED_IN_FLAGS(0 | CLASS_Config), 0, TEXT("/Script/MultiUserTool"), NO_API) \
	DECLARE_SERIALIZER(AXPlayerController) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_INCLASS \
	private: \
	static void StaticRegisterNativesAXPlayerController(); \
	friend MULTIUSERTOOL_API class UClass* Z_Construct_UClass_AXPlayerController(); \
	public: \
	DECLARE_CLASS(AXPlayerController, APlayerController, COMPILED_IN_FLAGS(0 | CLASS_Config), 0, TEXT("/Script/MultiUserTool"), NO_API) \
	DECLARE_SERIALIZER(AXPlayerController) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API AXPlayerController(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AXPlayerController) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AXPlayerController); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AXPlayerController); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API AXPlayerController(AXPlayerController&&); \
	NO_API AXPlayerController(const AXPlayerController&); \
public:


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_ENHANCED_CONSTRUCTORS \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API AXPlayerController(AXPlayerController&&); \
	NO_API AXPlayerController(const AXPlayerController&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AXPlayerController); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AXPlayerController); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AXPlayerController)


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_PRIVATE_PROPERTY_OFFSET \
	FORCEINLINE static uint32 __PPO__NeuronWidgetBP() { return STRUCT_OFFSET(AXPlayerController, NeuronWidgetBP); } \
	FORCEINLINE static uint32 __PPO__NeuronWidgetInfoBP() { return STRUCT_OFFSET(AXPlayerController, NeuronWidgetInfoBP); }


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_16_PROLOG \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_EVENT_PARMS


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_PRIVATE_PROPERTY_OFFSET \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_RPC_WRAPPERS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_CALLBACK_WRAPPERS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_INCLASS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_PRIVATE_PROPERTY_OFFSET \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_RPC_WRAPPERS_NO_PURE_DECLS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_CALLBACK_WRAPPERS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_INCLASS_NO_PURE_DECLS \
	MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h_19_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID MultiUserToolrotoNew_4_15_Source_MultiUserTool_XPlayerController_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
